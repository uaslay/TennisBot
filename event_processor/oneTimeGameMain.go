package eventprocessor

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"
	// "errors" // –ü–æ–∫–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	// "gorm.io/gorm" // –ü–æ–∫–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
	db "TennisBot/database"
	ui "TennisBot/ui"
)

// OneTimeGameHandler is a handler for one-time game
func (ev_proc EventProcessor) OneTimeGameHandler(
	bot *tgbotapi.BotAPI,
	update tgbotapi.Update,
	activeRoutines map[int64](chan string),
	playerID int64,
	dbClient *db.DBClient) {

	var messageID int                                     // ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ —Ä–µ–¥–∞–≥—É—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ
	var replyMarkupMainMenu tgbotapi.InlineKeyboardMarkup // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫—É —ñ–≥–æ—Ä

	singleGameChoice := DefaultOneTimeGameChoice() // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É

	state := ui.SingleGameMenu                        // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
	player, errPlayer := dbClient.GetPlayer(playerID) // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è
	if errPlayer != nil {
		log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è %d: %v", playerID, errPlayer)
		var chatID int64
		if update.Message != nil {
			chatID = update.Message.Chat.ID
		} else if update.CallbackQuery != nil {
			chatID = update.CallbackQuery.Message.Chat.ID
		}
		if chatID != 0 {
			ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é."))
		}
		return
	}

	var chatID int64 // –í–∏–∑–Ω–∞—á–∞—î–º–æ chatID
	if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
	} else {
		log.Println("OneTimeGameHandler: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chatID")
		return
	}

	if _, exists := activeRoutines[player.UserID]; exists { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—ó —Ä—É—Ç–∏–Ω–∏
		log.Printf("OneTimeGameHandler: –†—É—Ç–∏–Ω–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.", player.UserID)
		ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—é –¥—ñ—é."))
		return
	}

	activeRoutines[player.UserID] = make(chan string, 1) // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–Ω–∞–ª

	// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç—Ä–∏–≥–µ—Ä
	if update.Message != nil {
		activeRoutines[player.UserID] <- update.Message.Text
	} else if update.CallbackQuery != nil {
		activeRoutines[player.UserID] <- update.CallbackQuery.Data
	}

	replyMarkup := ui.NewKeyboard() // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è

	timer := time.NewTimer(ui.TimerPeriod) // –¢–∞–π–º–µ—Ä
	defer func() {                         // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
		timer.Stop()
		if ch, ok := activeRoutines[player.UserID]; ok {
			close(ch)
			delete(activeRoutines, player.UserID)
			log.Printf("OneTimeGameHandler: –†—É—Ç–∏–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.", player.UserID)
		}
	}()

out:
	for {
		select {
		case <-timer.C: // –¢–∞–π–º-–∞—É—Ç
			log.Printf("OneTimeGameHandler: –¢–∞–π–º–µ—Ä —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.", player.UserID)
			msg := tgbotapi.NewMessage(chatID, "–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–ø–ª–∏–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
			if messageID != 0 {
				ev_proc.bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
			}
			_, _ = ev_proc.bot.Send(msg)
			ev_proc.mainMenu(chatID)
			break out

		case inputData, ok := <-activeRoutines[player.UserID]: // –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ
			if !ok {
				log.Printf("OneTimeGameHandler: –ö–∞–Ω–∞–ª –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d –∑–∞–∫—Ä–∏—Ç–æ.", player.UserID)
				break out
			} // –ö–∞–Ω–∞–ª –∑–∞–∫—Ä–∏—Ç–æ

			// –°–∫–∏–¥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
			if !timer.Stop() {
				select {
				case <-timer.C:
				default:
				}
			}
			timer.Reset(ui.TimerPeriod)

			// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –≤–∏—Ö–æ–¥—É
			if inputData == ui.QuitChannelCommand {
				log.Printf("OneTimeGameHandler: –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –≤–∏—Ö–æ–¥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.", player.UserID)
				if messageID != 0 {
					ev_proc.bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
				}
				ev_proc.mainMenu(chatID)
				break out
			}

			// –ì–æ–ª–æ–≤–Ω–∏–π switch —Å—Ç–∞–Ω—ñ–≤
			switch state {
			case ui.SingleGameMenu: // –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É —á—É–∂–∏—Ö —ñ–≥–æ—Ä + –∫–Ω–æ–ø–∫–∏ "–ú–æ—ó —ñ–≥—Ä–∏", "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏"
				if len(replyMarkupMainMenu.InlineKeyboard) > 0 {
					replyMarkupMainMenu.InlineKeyboard = nil
				}
				games, errGames := dbClient.GetGames()
				if errGames != nil { // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–≥–æ—Ä
					log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —ñ–≥–æ—Ä: %v", errGames)
					ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä."))
					ev_proc.mainMenu(chatID)
					break out
				}
				currentTime := time.Now()
				todayStart := time.Date(currentTime.Year(), currentTime.Month(), currentTime.Day(), 0, 0, 0, 0, currentTime.Location())
				var gameButtons [][]tgbotapi.InlineKeyboardButton
				for _, game := range games { // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —á—É–∂–∏—Ö —ñ–≥–æ—Ä
					if game.Date == "" {
						continue
					}
					unixTimestamp, errParse := strconv.ParseInt(game.Date, 10, 64)
					if errParse != nil {
						log.Printf("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –≥—Ä–∏ %d ('%s'): %v", game.ID, game.Date, errParse)
						continue
					}
					gameTime := time.Unix(unixTimestamp, 0)
					if (gameTime.After(todayStart) || gameTime.Equal(todayStart)) && game.Player.UserID != playerID {
						gameButtons = append(gameButtons, tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData(game.String(), fmt.Sprint(game.ID)),
						))
					}
				}
				controlButtons := tgbotapi.NewInlineKeyboardRow( // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
					tgbotapi.NewInlineKeyboardButtonData("üßê –ú–æ—ó —ñ–≥—Ä–∏", ui.MyProposedGamesCallback),
					tgbotapi.NewInlineKeyboardButtonData(ui.ProposeGame, ui.ProposeGame),
				)
				replyMarkupMainMenu.InlineKeyboard = append(gameButtons, controlButtons) // –ó–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
				msgText := ui.InitialMessage
				if len(gameButtons) == 0 {
					msgText = "–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –≤—ñ–¥ —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤..."
				}
				if messageID != 0 {
					ev_proc.bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
					messageID = 0
				} // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
				msg := tgbotapi.NewMessage(chatID, msgText)
				msg.ReplyMarkup = replyMarkupMainMenu
				response, err := ev_proc.bot.Send(msg) // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
				if err != nil {
					log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —ñ–≥–æ—Ä: %v", err)
					break out
				}
				messageID = response.MessageID
				state = ui.ProcessSingleGameMenu // –û—á—ñ–∫—É—î–º–æ –≤–∏–±–æ—Ä—É –≥—Ä–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏

			case ui.ProcessSingleGameMenu: // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –≥—Ä–∏ –∞–±–æ –∫–Ω–æ–ø–∫–∏
				if inputData == ui.ProposeGame {
					state = ui.ProposeGameMenu          // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –º–µ–Ω—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏
					activeRoutines[player.UserID] <- "" // –¢—Ä–∏–≥–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
				} else if inputData == ui.MyProposedGamesCallback {
					log.Printf("OneTimeGameHandler: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ú–æ—ó —ñ–≥—Ä–∏' (–æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ Process)", playerID)
					// –ó–∞–ª–∏—à–∞—î–º–æ—Å—å –≤ —Ü—å–æ–º—É —Å—Ç–∞–Ω—ñ, —á–µ–∫–∞—î–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó –∞–±–æ –∫–æ–ª–±–µ–∫ –∑ Process
				} else if inputData != "" { // –û–±—Ä–∞–Ω–æ –≥—Ä—É –∑—ñ —Å–ø–∏—Å–∫—É (inputData - —Ü–µ gameID)
					gameID_uint64, err := strconv.ParseUint(inputData, 10, 64)
					if err != nil {
						log.Printf("OneTimeGameHandler: –ù–µ–≤—ñ—Ä–Ω–∏–π gameID '%s': %v", inputData, err)
						state = ui.SingleGameMenu
						activeRoutines[player.UserID] <- ""
						continue
					}
					gameID := uint(gameID_uint64)
					game, errGame := dbClient.GetGame(gameID)
					if errGame != nil {
						log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∏ %d: %v", gameID, errGame)
						ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏.")) // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
						state = ui.SingleGameMenu
						activeRoutines[player.UserID] <- ""
						continue
					}
					gamePlayer, errGamePlayer := dbClient.GetPlayer(game.Player.UserID)
					if errGamePlayer != nil {
						log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è %d –¥–ª—è –≥—Ä–∏ %d: %v", game.Player.UserID, gameID, errGamePlayer)
						ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è –¥–ª—è —Ü—ñ—î—ó –≥—Ä–∏."))
						state = ui.SingleGameMenu
						activeRoutines[player.UserID] <- ""
						continue
					}
					// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ/—ñ–Ω—Ñ–æ gamePlayer
					var playerInfoMsg tgbotapi.Chattable
					if gamePlayer.AvatarFileID != "" {
						photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileID(gamePlayer.AvatarFileID))
						photo.Caption = "–î–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è:\n\n" + gamePlayer.String()
						playerInfoMsg = photo
					} else {
						msgInfo := tgbotapi.NewMessage(chatID, "–î–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è:\n\n"+gamePlayer.String())
						playerInfoMsg = msgInfo
					}
					if _, errSend := bot.Send(playerInfoMsg); errSend != nil {
						log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è %d: %v", gamePlayer.UserID, errSend)
						if _, okPhoto := playerInfoMsg.(tgbotapi.PhotoConfig); okPhoto { // –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç
							bot.Send(tgbotapi.NewMessage(chatID, "–î–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è:\n\n"+gamePlayer.String()))
						}
					}
					// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ confirm_game:yes/no
					msgReply := tgbotapi.NewMessage(chatID, "–ë–∞–∂–∞—î—Ç–µ –≤—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—è –Ω–∞ —Ü—é –≥—Ä—É?")
					confirmDataYes := fmt.Sprintf("confirm_game:yes:%d", gameID)
					confirmDataNo := fmt.Sprintf("confirm_game:no:%d", gameID)
					msgReply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonData(ui.GameConfirmationYes, confirmDataYes),
							tgbotapi.NewInlineKeyboardButtonData(ui.GameConfirmationNo, confirmDataNo),
						),
					)
					_, errSendReply := ev_proc.bot.Send(msgReply)
					if errSendReply != nil {
						log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≥—Ä–∏: %v", errSendReply)
					}
					// –ó–∞–ª–∏—à–∞—î–º–æ—Å—å —É —Å—Ç–∞–Ω—ñ state = ui.ProcessSingleGameMenu, —á–µ–∫–∞—î–º–æ callback
				} else { // –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ –¥–∞–Ω—ñ
					log.Printf("OneTimeGameHandler: –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ –¥–∞–Ω—ñ '%s' —É —Å—Ç–∞–Ω—ñ ProcessSingleGameMenu", inputData)
					state = ui.SingleGameMenu // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É
					activeRoutines[player.UserID] <- ""
				}

			case ui.ProposeGameMenu: // –ü–æ–∫–∞–∑ –º–µ–Ω—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏
				log.Printf("OneTimeGameHandler: –í—Ö—ñ–¥ —É —Å—Ç–∞–Ω ProposeGameMenu –¥–ª—è %d", playerID)
				var msgChattable tgbotapi.Chattable
				replyMarkup = ui.NewKeyboard()                // –°–∫–∏–¥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
				singleGameChoice = DefaultOneTimeGameChoice() // –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä
				if messageID != 0 {
					bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
					messageID = 0
				} // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
				msgNew := tgbotapi.NewMessage(chatID, ui.InitialMessage)
				msgNew.ReplyMarkup = replyMarkup
				msgChattable = msgNew
				response, err := ev_proc.bot.Send(msgChattable) // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
				if err != nil {
					log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏: %v", err)
					ev_proc.mainMenu(chatID)
					break out
				}
				messageID = response.MessageID
				state = ui.EditProposeGameMenu // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è

			case ui.EditProposeGameMenu: // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø—Ü—ñ–π –≥—Ä–∏
				log.Printf("OneTimeGameHandler: –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö '%s' —É —Å—Ç–∞–Ω—ñ EditProposeGameMenu –¥–ª—è %d", inputData, playerID)
				if inputData == ui.Ok { // –ù–∞—Ç–∏—Å–Ω—É—Ç–æ OK
					// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É (–º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ)
					if singleGameChoice.Date == "" || singleGameChoice.Date == ui.DateWillSpecify {
						singleGameChoice.Date = strconv.FormatInt(time.Now().Unix(), 10)
					} else if singleGameChoice.Date == ui.DateTomorrow {
						singleGameChoice.Date = strconv.FormatInt(time.Now().AddDate(0, 0, 1).Unix(), 10)
					}
					state = ui.Selected                 // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
					activeRoutines[player.UserID] <- "" // –¢—Ä–∏–≥–µ—Ä –¥–ª—è —Å—Ç–∞–Ω—É Selected
				} else if inputData == ui.Back { // –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –ù–∞–∑–∞–¥
					state = ui.SingleGameMenu // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —ñ–≥–æ—Ä
					if messageID != 0 {
						bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
						messageID = 0
					}
					activeRoutines[player.UserID] <- "" // –¢—Ä–∏–≥–µ—Ä –¥–ª—è —Å—Ç–∞–Ω—É SingleGameMenu
				} else if inputData != "" { // –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –æ–ø—Ü—ñ—ó
					newReplyMarkup, errChoice := processGameChoice(inputData, replyMarkup, &singleGameChoice)
					if errChoice != nil {
						log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É '%s': %v", inputData, errChoice)
						// –ú–æ–∂–ª–∏–≤–æ, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É? –ê–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.
						continue // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ—à—Ç—É —ñ—Ç–µ—Ä–∞—Ü—ñ—ó —Ç–∞ —á–µ–∫–∞—Ç–∏ –Ω–∞ –Ω–æ–≤–∏–π —ñ–Ω–ø—É—Ç
					}
					replyMarkup = newReplyMarkup                                                  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
					msgEdit := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, replyMarkup) // –ì–æ—Ç—É—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
					_, errEdit := ev_proc.bot.Send(msgEdit)                                       // –†–µ–¥–∞–≥—É—î–º–æ
					if errEdit != nil {
						log.Printf("OneTimeGameHandler: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: %v", errEdit)
					}
					// –ó–∞–ª–∏—à–∞—î–º–æ—Å—å —É —Ü—å–æ–º—É –∂ —Å—Ç–∞–Ω—ñ state = ui.EditProposeGameMenu, —á–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π
				} else {
					log.Printf("OneTimeGameHandler: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ —É —Å—Ç–∞–Ω—ñ EditProposeGameMenu –¥–ª—è %d", playerID)
				}

			case ui.Selected: // –ü–æ–∫–∞–∑ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≥—Ä–∏ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
				log.Printf("OneTimeGameHandler: –í—Ö—ñ–¥ —É —Å—Ç–∞–Ω Selected –¥–ª—è %d, –¥–∞–Ω—ñ: %+v", playerID, singleGameChoice)
				// –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç—ñ–≤
				if singleGameChoice.Area == "" {
					singleGameChoice.Area = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
				} else {
					singleGameChoice.Area = strings.TrimSpace(singleGameChoice.Area)
				}
				if _, err := strconv.ParseInt(singleGameChoice.Date, 10, 64); err != nil { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞—Ç–∞ –≤–∂–µ timestamp
					log.Printf("OneTimeGameHandler: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ '%s' –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ.", singleGameChoice.Date)
					singleGameChoice.Date = strconv.FormatInt(time.Now().Unix(), 10) // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ —è–∫ fallback
				}
				if singleGameChoice.Time == ui.TimeDoNotCare || singleGameChoice.Time == ui.TimeWillSpecify {
					singleGameChoice.Time = "–ù–µ–≤–∞–∂–ª–∏–≤–æ"
				}
				if singleGameChoice.Court == ui.CourtDoNotCare || singleGameChoice.Court == ui.CourtWillSpecify {
					singleGameChoice.Court = "–ù–µ–≤–∞–∂–ª–∏–≤–æ"
				}
				// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
				if messageID != 0 {
					bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
					messageID = 0
				}
				// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Å—É–º–∫–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –¢–∞–∫/–ù—ñ
				msg := tgbotapi.NewMessage(chatID, "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É:")
				msg.Text = singleGameChoice.Serialize() // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≥—Ä–∏
				msg.ReplyMarkup = ui.ChoiceConfirmation // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¢–∞–∫/–ù—ñ
				response, err := ev_proc.bot.Send(msg)
				if err != nil {
					log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: %v", err)
					ev_proc.mainMenu(chatID)
					break out
				}
				messageID = response.MessageID // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¢–∞–∫/–ù—ñ
				state = ui.AllSelected         // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¢–∞–∫/–ù—ñ

			case ui.AllSelected: // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¢–∞–∫/–ù—ñ
				log.Printf("OneTimeGameHandler: –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö '%s' —É —Å—Ç–∞–Ω—ñ AllSelected –¥–ª—è %d", inputData, playerID)
				if messageID != 0 {
					bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
					messageID = 0
				} // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¢–∞–∫/–ù—ñ
				player, errPlayer := dbClient.GetPlayer(playerID)
				if errPlayer != nil {
					log.Printf("Error getting player %d before creating game: %v", playerID, errPlayer)
					ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è."))
					break out
				}
				if inputData == ui.Yes { // –Ø–∫—â–æ "–¢–∞–∫" - —Å—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É
					game := db.ProposedGame{ // –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –≥—Ä–∏
						PlayerID:      player.ID,
						RegionSection: singleGameChoice.Area,
						Partner:       singleGameChoice.Partner,
						Date:          singleGameChoice.Date, // –ú–∞—î –±—É—Ç–∏ timestamp
						Time:          singleGameChoice.Time,
						Court:         singleGameChoice.Court,
						Payment:       singleGameChoice.Payment,
					}
					errCreate := dbClient.CreateGame(game) // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
					if errCreate != nil {
						log.Printf("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏ –≤ –ë–î –¥–ª—è –≥—Ä–∞–≤—Ü—è %d: %v", playerID, errCreate)
						ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≥—Ä–∏..."))
					} else {
						log.Printf("–ì—Ä–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ –ë–î –¥–ª—è –≥—Ä–∞–≤—Ü—è %d: %+v", playerID, game)
						ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–í–∞—à—É –≥—Ä—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!"))
					}
				} else if inputData == ui.No { // –Ø–∫—â–æ "–ù—ñ" - —Å–∫–∞—Å–æ–≤—É—î–º–æ
					ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."))
				} else { // –Ø–∫—â–æ —â–æ—Å—å —ñ–Ω—à–µ
					log.Printf("OneTimeGameHandler: –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ –¥–∞–Ω—ñ '%s' —É —Å—Ç–∞–Ω—ñ AllSelected", inputData)
					ev_proc.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."))
				}
				log.Printf("OneTimeGameHandler: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—ñ—Å–ª—è AllSelected –¥–ª—è %d.", playerID)
				ev_proc.mainMenu(chatID) // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
				break out                // –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä—É—Ç–∏–Ω—É

			default: // –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω
				log.Printf("OneTimeGameHandler: –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω %v –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d", state, playerID)
				if messageID != 0 {
					bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
				}
				ev_proc.mainMenu(chatID)
				break out
			} // end switch state
		} // end select
	} // end for
	log.Printf("OneTimeGameHandler: –í–∏—Ö—ñ–¥ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.", playerID)
} // end func OneTimeGameHandler
