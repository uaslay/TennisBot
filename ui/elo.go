package ui

import (
    "os"
	"fmt"
    "log"
	"math"
    "strings"
	"encoding/json"
)

const (
    GeneralRatingButton = "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥"
    FixScoreButton = "‚úçÔ∏è –ó–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è
type Player struct {
    ID            string   `json:"id"`
    Username      string   `json:"username"`
    Name          string   `json:"name"`
    Rating        int      `json:"rating"`
    Wins          int      `json:"wins"`
    Losses        int      `json:"losses"`
    Matches       int      `json:"matches"`
    ActiveMatches []string `json:"active_matches"` // –°–ø–∏—Å–æ–∫ ID –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–∞—Ç—á—ñ–≤
}



// –§–∞–π–ª, –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≥—Ä–∞–≤—Ü—ñ
const playersFile = "players.json"

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≥—Ä–∞–≤—Ü—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É
func LoadPlayers() map[string]Player {
    file, err := os.Open(playersFile)
    if err != nil {
        return make(map[string]Player) // –Ø–∫—â–æ —Ñ–∞–π–ª—É –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É –º–∞–ø—É
    }
    defer file.Close()

    var players map[string]Player
    decoder := json.NewDecoder(file)
    err = decoder.Decode(&players)
    if err != nil {
        return make(map[string]Player)
    }
    return players
}

// SavePlayers –∑–±–µ—Ä—ñ–≥–∞—î –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—ñ–≤ —É —Ñ–∞–π–ª
func SavePlayers(players map[string]Player) {
    file, err := os.Create(playersFile)
    if err != nil {
        log.Println("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤:", err)
        panic(err)
        return
    }
    defer file.Close()

    encoder := json.NewEncoder(file)
    encoder.SetIndent("", "  ")
    if err := encoder.Encode(players); err != nil {
        log.Println("–ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è JSON:", err)
        panic(err)
    }
    fmt.Printf("DEBUG: Players successfully saved: %+v\n", players)
}


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ K –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–π—Ç–∏–Ω–≥—É —Ç–∞ –º–∞—Ç—á—ñ–≤
func getKFactor(rating int, matches int) int {
	if matches < 30 {
		return 40
	} else if rating <= 600 {
		return 25
	} else if rating <= 2400 {
		return 20
	}
	return 10
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥—Ä–∞–≤—Ü—è A
func expectedScore(ratingA, ratingB int) float64 {
	return 1 / (1 + math.Pow(10, float64(ratingB-ratingA)/400))
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—ñ—Å–ª—è –º–∞—Ç—á—É
func UpdateElo(ratingA, ratingB, matchesA, matchesB int, resultA float64) (int, int) {
	E_A := expectedScore(ratingA, ratingB)
	E_B := expectedScore(ratingB, ratingA)

	K_A := getKFactor(ratingA, matchesA)
	K_B := getKFactor(ratingB, matchesB)

	newRatingA := ratingA + int(math.Round(float64(K_A) * (resultA - E_A)))
	newRatingB := ratingB + int(math.Round(float64(K_B) * ((1 - resultA) - E_B)))

	return newRatingA, newRatingB
}

// –û–Ω–æ–≤–ª—é—î —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—ñ–≤ –ø—ñ—Å–ª—è –º–∞—Ç—á—É
func UpdatePlayerRating(playerAID, playerBID string, resultA float64) {
    players := LoadPlayers()
    // –Ø–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å A –Ω–µ —ñ—Å–Ω—É—î ‚Äì —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
    playerA, existsA := players[playerAID]
    if !existsA {
        playerA = Player{ID: playerAID, Username: "", Name: "Unknown", Rating: 0, Wins: 0, Losses: 0, Matches: 0}
    }
    // –Ø–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å B –Ω–µ —ñ—Å–Ω—É—î ‚Äì —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
    playerB, existsB := players[playerBID]
    if !existsB {
        playerB = Player{ID: playerBID, Username: "", Name: "Unknown", Rating: 0, Wins: 0, Losses: 0, Matches: 0}
    }
    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥–∏
    newRatingA, newRatingB := UpdateElo(playerA.Rating, playerB.Rating, playerA.Matches, playerB.Matches, resultA)

    playerA.Rating = newRatingA
    playerB.Rating = newRatingB
    playerA.Matches++
    playerB.Matches++

    if resultA == 1 {
        playerA.Wins++
        playerB.Losses++
    } else {
        playerA.Losses++
        playerB.Wins++
    }

    players[playerAID] = playerA
    players[playerBID] = playerB

    SavePlayers(players) // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –±–∞–∑—É
}



// –û—Ç—Ä–∏–º—É—î —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—è —Ä–∞–∑–æ–º —ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –≤–∏–≥—Ä–∞—à—ñ–≤/–ø–æ—Ä–∞–∑–æ–∫
func GetPlayerRating(playerID string) string {
    players := LoadPlayers()

    player, exists := players[playerID]
    if !exists {
        // –Ø–∫—â–æ –≥—Ä–∞–≤—Ü—è –Ω–µ–º–∞—î ‚Äì —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º 0
        player = Player{
            ID:      playerID,
            Name:    "Unknown",
            Rating:  0,  // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = 0
            Wins:    0,
            Losses:  0,
            Matches: 0,
        }
        players[playerID] = player
        SavePlayers(players) // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    }

    return fmt.Sprintf("–í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %d (–í–∏–≥—Ä–∞—à %d - %d –ü—Ä–æ–≥—Ä–∞—à)", 
        player.Rating, player.Wins, player.Losses)
}

// –ü–æ—à—É–∫ –≥—Ä–∞–≤—Ü—è –∑–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–º —Ç–≥
func GetPlayerByUsername(username string) (string, bool) {
    players := LoadPlayers()
    log.Printf("–®—É–∫–∞—é –≥—Ä–∞–≤—Ü—è –∑ —é–∑–µ—Ä–Ω–µ–π–º–æ–º: %s", username) // –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è

    for id, player := range players {
        log.Printf("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ: %s (%s)", player.Username, id) // –î–∏–≤–∏–º–æ—Å—è, —è–∫—ñ –¥–∞–Ω—ñ —î –≤ players.json
        if strings.EqualFold(player.Username, username) { // –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ä–µ–≥—ñ—Å—Ç—Ä
            return id, true
        }
    }
    return "", false // –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
}
