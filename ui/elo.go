package ui

import (
	"fmt"
    "log"
	"math"
    "errors" // –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
	"gorm.io/gorm"

    db "TennisBot/database"
)

const (
    GeneralRatingButton = "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥"
    FixScoreButton = "‚úçÔ∏è –ó–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫"
)

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ K –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–π—Ç–∏–Ω–≥—É —Ç–∞ –º–∞—Ç—á—ñ–≤
func GetKFactor(rating float64, matches int64) float64 {
	if matches < 30 {
		return 40.0
	} else if rating <= 600 { // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è float64 –∑ int - –ø—Ä–∞—Ü—é—î
		return 25.0
	} else if rating <= 2400 {
		return 20.0
	}
	return 10.0
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥—Ä–∞–≤—Ü—è A
func expectedScore(ratingA, ratingB float64) float64 {
	return 1.0 / (1.0 + math.Pow(10.0, (ratingB-ratingA)/400.0))
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—ñ—Å–ª—è –º–∞—Ç—á—É
func UpdateElo(ratingA, ratingB float64, matchesA, matchesB int64, resultA float64) (float64, float64) {
	E_A := expectedScore(ratingA, ratingB)
	E_B := expectedScore(ratingB, ratingA) // –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è B = 1 - E_A

	K_A := GetKFactor(ratingA, matchesA)
	K_B := GetKFactor(ratingB, matchesB)

	// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
	newRatingA := ratingA + K_A*(resultA-E_A)
	// –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è B = 1 - resultA
	newRatingB := ratingB + K_B*((1.0-resultA)-E_B)

	// –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ü—ñ–ª–æ–≥–æ
	return math.Round(newRatingA), math.Round(newRatingB)
}

// UpdatePlayerRating –æ–Ω–æ–≤–ª—é—î —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—ñ–≤ –ø—ñ—Å–ª—è –º–∞—Ç—á—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö
func UpdatePlayerRating(playerAID, playerBID int64, resultA float64, dbClient *db.DBClient) error {
	// 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–±–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –ë–î
	playerA, errA := dbClient.GetPlayer(playerAID)
	if errA != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è A (ID: %d): %v", playerAID, errA)
		return fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è A (ID: %d): %w", playerAID, errA)
	}

	playerB, errB := dbClient.GetPlayer(playerBID)
	if errB != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è B (ID: %d): %v", playerBID, errB)
		return fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è B (ID: %d): %w", playerBID, errB)
	}

	// 2. –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏
	newRatingA, newRatingB := UpdateElo(playerA.Rating, playerB.Rating, playerA.TotalMatches, playerB.TotalMatches, resultA)

	// 3. –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–±–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
	playerA.Rating = newRatingA // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
	playerB.Rating = newRatingB
	playerA.TotalMatches++      // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤
	playerB.TotalMatches++

	if resultA == 1.0 { // –ì—Ä–∞–≤–µ—Ü—å A –≤–∏–≥—Ä–∞–≤
		playerA.Won++
		playerB.Lost++
	} else if resultA == 0.0 { // –ì—Ä–∞–≤–µ—Ü—å A –ø—Ä–æ–≥—Ä–∞–≤ (B –≤–∏–≥—Ä–∞–≤)
		playerA.Lost++
		playerB.Won++
	} else {
		// –ú–æ–∂–Ω–∞ –æ–±—Ä–æ–±–∏—Ç–∏ –Ω—ñ—á–∏—é (resultA == 0.5), —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
		// –£ —Ç–µ–Ω—ñ—Å—ñ –∑–∞–∑–≤–∏—á–∞–π –Ω—ñ—á–∏—ó—Ö –Ω–µ–º–∞—î, –∞–ª–µ –¥–ª—è —ñ–Ω—à–∏—Ö —ñ–≥–æ—Ä –º–æ–∂–µ –±—É—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ
		log.Printf("–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (%.1f) –Ω–µ –∑–º—ñ–Ω—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–º–æ–≥/–ø—Ä–æ–≥—Ä–∞—à—ñ–≤.", resultA)
	}

	// 4. –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –≤ –ë–î
	errUpdateA := dbClient.UpdatePlayerStats(playerA) // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
	if errUpdateA != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è A (ID: %d): %v", playerAID, errUpdateA)
		// –í–∞–∂–ª–∏–≤–æ: –©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –æ–¥–∏–Ω –≥—Ä–∞–≤–µ—Ü—å –æ–Ω–æ–≤–∏–≤—Å—è, –∞ —ñ–Ω—à–∏–π –Ω—ñ? –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è!
		// –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É.
		return fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è A: %w", errUpdateA)
	}

	errUpdateB := dbClient.UpdatePlayerStats(playerB)
	if errUpdateB != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è B (ID: %d): %v", playerBID, errUpdateB)
		// –ü–æ–º–∏–ª–∫–∞ –¥—Ä—É–≥–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ –Ω–µ—É–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å
		return fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è B: %w", errUpdateB)
	}

	log.Printf("–†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ: –ì—Ä–∞–≤–µ—Ü—å %d -> %.2f, –ì—Ä–∞–≤–µ—Ü—å %d -> %.2f", playerAID, newRatingA, playerBID, newRatingB)
	return nil // –£—Å–ø—ñ—Ö
}


// GetPlayerRating –æ—Ç—Ä–∏–º—É—î —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
func GetPlayerRating(playerID int64, dbClient *db.DBClient) string {
	player, err := dbClient.GetPlayer(playerID)
	if err != nil {
		// –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ –ë–î
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –¥–ª—è –≥—Ä–∞–≤—Ü—è ID %d: %v", playerID, err)
		// –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
		return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ? /start"
	}

	// –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä—è–¥–æ–∫ –∑ –¥–∞–Ω–∏–º–∏ –≥—Ä–∞–≤—Ü—è
	return fmt.Sprintf("–í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %.0f (–í–∏–≥—Ä–∞—à %d - %d –ü—Ä–æ–≥—Ä–∞—à, –ú–∞—Ç—á—ñ–≤: %d)",
		player.Rating, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ %.0f –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ —Ü—ñ–ª–µ
		player.Won,
		player.Lost,
		player.TotalMatches)
}

// GetPlayerByUsername —à—É–∫–∞—î –≥—Ä–∞–≤—Ü—è –∑–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–º —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
func GetPlayerByUsername(username string, dbClient *db.DBClient) (int64, bool) {
	player, err := dbClient.GetPlayerByUsername(username)
	if err != nil {
		// –ü–æ–º–∏–ª–∫–∞ (–≤–∫–ª—é—á–∞—é—á–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)
		if !errors.Is(err, gorm.ErrRecordNotFound) { // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ "—Å–ø—Ä–∞–≤–∂–Ω—ñ" –ø–æ–º–∏–ª–∫–∏ –ë–î
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≥—Ä–∞–≤—Ü—è –∑–∞ UserName '%s': %v", username, err)
		}
		return 0, false // –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞
	}
	// –ì—Ä–∞–≤–µ—Ü—å –∑–Ω–∞–π–¥–µ–Ω–∏–π
	return player.UserID, true
}
